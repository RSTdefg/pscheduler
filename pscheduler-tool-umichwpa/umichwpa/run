#!/usr/bin/env python3

#
# Development Order #5:
#
# This is the meat and bones of the tool, where the actual desired
# commands or operation will be run. The results are then recorded
# and added to the 'results' JSON data, which will then be sent
# back to the test. Both system and api are able to be used here.
#

from wpa_supplicant.core import WpaSupplicantDriver
from twisted.internet.selectreactor import SelectReactor
import threading
import datetime
import pscheduler
import time

error = []
diags = []
authenticated = False
succeeded = False

input = pscheduler.json_load(exit_on_error=True)
#parse the arguments

#underscore username and password
username = input['test']['spec'].get('_username', None)
password = input['test']['spec'].get('_password', None)
driver_input = input['test']['spec'].get('driver', None)
ssid = input['test']['spec'].get('ssid', None)
bssid = input['test']['spec'].get('bssid', None)
key_management = input['test']['spec'].get('key-management', None)
timeout_iso = input['test']['spec'].get('timeout', 'PT10S')
timeout = pscheduler.timedelta_as_seconds(pscheduler.iso8601_as_timedelta(timeout_iso))

check_status = ["systemctl","is-active","--quiet","wpa_supplicant"]
status, _, _ = pscheduler.run_program(check_status, timeout=timeout)
if status != 0:
    pscheduler.fail('wpa_supplicant is not running')


reactor = SelectReactor()
t = threading.Thread(target=reactor.run, kwargs={'installSignalHandlers': 0})
t.daemon = True
t.start()

time.sleep(0.1)  # let reactor start

# defining network part of wpa_supplicant.conf
wpa_supplicant_config = {}
wpa_supplicant_config['scan_ssid'] = 1
if ssid:
    wpa_supplicant_config['ssid'] = ssid
if bssid:
    wpa_supplicant_config['bssid'] = bssid
if key_management:
    wpa_supplicant_config['key_mgmt'] = key_management
if username:
    wpa_supplicant_config['identity'] = username
if password:
    wpa_supplicant_config['password'] = password

error.append(wpa_supplicant_config)

driver = WpaSupplicantDriver(reactor)
supplicant = driver.connect()

try:
    interface = supplicant.create_interface(interface, driver=driver_input)
#interface already exists
except:
    interface = supplicant.get_interface(interface)

#configure interface
network = interface.add_network(wpa_supplicant_config)

#attempt association
start_time = datetime.datetime.now()
interface.select_network(network.get_path())

#verify association
final_state = 'None'
while not succeeded and timeout > 0:
    final_state = interface.get_state()
    if final_state == 'completed':
        succeeded = True
        authenticated = True
    else:
        time.sleep(1)
        timeout -= 1

end_time = datetime.datetime.now()
diags.append(final_state)
# Organize results into json data
results = {
    'succeeded': succeeded,
    'result': {
        'schema': 1,
        'time': pscheduler.timedelta_as_iso8601(end_time - start_time),
        'succeeded': succeeded,
        'authenticated': authenticated,
        'state': final_state,
    },
    'error': error,
    'diags': diags 
}

if succeeded:
    curr_bss = interface.get_current_bss()
    results['result']['bssid'] = curr_bss.get_bssid()
    results['result']['ssid'] = curr_bss.get_ssid()
else:
    if final_state == 'associated':
        diags.append('Associated but not authenticated, check credentials')

reactor.disconnectAll()
reactor.sigTerm()
pscheduler.succeed_json(results)
