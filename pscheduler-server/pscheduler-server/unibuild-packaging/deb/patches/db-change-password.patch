diff -Nru database/db-change-password.raw database-debian/db-change-password.raw
--- pscheduler-server/database/db-change-password.raw	2021-12-02 21:28:45.344229485 +0000
+++ pscheduler-server/database/db-change-password.raw	2022-02-24 19:45:26.552727343 +0000
@@ -24,46 +24,72 @@
 
 # Generate the new password and write it to the config files
 
+DATABASE_DIR=/etc/pscheduler/database
+
+ROLE=pscheduler
+PASSWORDFILE="${DATABASE_DIR}/database-password"
+DSNFILE="${DATABASE_DIR}/database-dsn"
+PGPASSFILE="${DATABASE_DIR}/pgpassfile"
+
+# Make a file that's safe from prying eyes
+protected()
+{
+    rm -rf "$@"
+    touch "$@"
+    chmod 600 "$@"
+    chown pscheduler:root "$@"
+}
+
+
 # Password
-random-string --safe --length 60 --randlength > '__PASSWORDFILE__'
+protected "${PASSWORDFILE}"
+(< /dev/urandom tr -dc _A-Za-z0-9 | head -c64 && echo) >> "${PASSWORDFILE}"
 
 # DSN
-cat > '__DSNFILE__' <<EOF
-dbname=__DATABASE__ user=__ROLE__ password=$(cat '__PASSWORDFILE__')
+protected "${DSNFILE}"
+cat >> "${DSNFILE}" <<EOF
+dbname=pscheduler user=${ROLE} password=$(cat "${PASSWORDFILE}")
 EOF
 
 # Pg Password
-cat > '__PGPASSFILE__' <<EOF
-*:*:__DATABASE__:__ROLE__:$(cat '__PASSWORDFILE__')
+protected "${PGPASSFILE}"
+cat >> "${PGPASSFILE}" <<EOF
+*:*:pscheduler:${ROLE}:$(cat "${PASSWORDFILE}")
 EOF
 
 
 # Change it in the database
 
 ROLESQL="${TMPBASE}.rolesql"
-touch "${ROLESQL}"
-chmod 400 "${ROLESQL}"
+protected "${ROLESQL}"
+
+cat >> "${ROLESQL}" <<EOF
+ALTER ROLE ${ROLE} WITH PASSWORD '$(cat "${PASSWORDFILE}")';
 
-cat > "${ROLESQL}" <<EOF
 DO \$\$
 BEGIN
     PERFORM pg_terminate_backend(pg_stat_activity.pid)
     FROM pg_stat_activity
     WHERE
-        pg_stat_activity.datname = '__DATABASE__'
-        AND usename = '__ROLE__'
+        pg_stat_activity.datname = 'pscheduler'
+        AND usename = '${ROLE}'
         AND pid <> pg_backend_pid()     -- Not this connection
         AND application_name <> 'psql'  -- Not interactive sessions
         ;
 END;
 \$\$ LANGUAGE plpgsql;
+
 EOF
 
-printf "ALTER ROLE __ROLE__ WITH PASSWORD '" > "${ROLESQL}"
-tr -d "\n" < "__PASSWORDFILE__" >> "${ROLESQL}"
-printf "';\n"  >> "${ROLESQL}"
 
-postgresql-load "${ROLESQL}"
+DB_OUTPUT="${TMPBASE}.output"
+< "${ROLESQL}" su -l -c 'psql -U "${ROLE}" "pscheduler"' postgres > "${DB_OUTPUT}" 2>&1
+if [ $? -ne 0 ]
+then
+    cat "${OUTPUT}" 1>&2
+    exit 1
+fi
+
 
 if $INTERACTIVE
 then
