import pscheduler

import socket, os
from datetime import datetime
from time import sleep

#temp file preserved between consecutive runs but not reboots
WPA_CONFIG_PATH = '/tmp/wpa_supplicant/wpa_supplicant.conf'
#initializes only wpa_supplicant starts
WPA_CTRL_IFACE_BASE = '/var/run/wpa_supplicant'

# parse config
pscheduler_input = pscheduler.json_load(exit_on_error=True)
get_ssid = pscheduler_input['test']['spec'].get('ssid', None)
ssid_set = set(get_ssid.split(',')) if get_ssid else set()
duration_iso = pscheduler_input['test']['spec'].get('duration', 'PT5S')
timeout_iso = pscheduler_input['test']['spec'].get('timeout', 'PT10S')
timeout = pscheduler.timedelta_as_seconds(pscheduler.iso8601_as_timedelta(timeout_iso))
duration = pscheduler.timedelta_as_seconds(pscheduler.iso8601_as_timedelta(duration_iso)) 
start_time = datetime.datetime.now()
succeeded = False
error = ''
diags = ''
ssid_list = []

#check if interface already exists
if not os.path.exists(WPA_CTRL_IFACE_BASE+'/'+interface):
    #create config file and start wpa_supplicant
    with open(WPA_CONFIG_PATH, 'w') as f:
        f.write('ctrl_interface='+WPA_CTRL_IFACE_BASE+'\r\n')
        f.write('update_config=1\r\n')
    os.system('wpa_supplicant -B -i '+interface+' -c '+WPA_CONFIG_PATH)

# IMPORTANT NOTE: This code puts the process to sleep until the
# scheduled start time has arrived.  It should be placed after all
# preparatory code has been executed and immediately before the tool
# is invoked (for plugins that run other programs) or any activity
# that does a measurement (for those that don't).

try:
    pscheduler.sleep_until(pscheduler_input['schedule']['start'])
except KeyError:
    pscheduler.fail("Unable to find start time in input")

# scanning via command line
scan = ['sudo', 'wpa_cli', '-i', 'wlan0', 'scan']
_, _, err = pscheduler.run_program(scan)

#wait for scan to complete
sleep(5)

results = ['sudo', 'wpa_cli', '-i', 'wlan0', 'scan_results']
_, output, err = pscheduler.run_program(results)

result = [s.split('\t') for s in output.split('\n')][:-1]

succeeded = True if len(result) > 1 else False

for bssid, freq, signal, flags, ssid in result[1:]:
    if not ssid_set or ssid in ssid_set:
        ssid_list.append({
            'ssid': ssid,
            'bssid': bssid,
            'freq': int(freq),
            'signal': int(signal),
            'flags': flags
        })
end_time = datetime.datetime.now()

# Organize results into json data
results = {
    'succeeded': succeeded,
    'result': {
        'schema': 1,
        'time': pscheduler.timedelta_as_iso8601(end_time - start_time),
        'succeeded': succeeded,
        'ssid_list': ssid_list
    },
    'error': error,
    'diags': diags 
}

pscheduler.succeed_json(results)